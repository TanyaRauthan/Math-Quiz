import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Check, X } from 'lucide-react';

const generateQuestion = (level) => {
  let num1, num2, correctAnswer, question;
  if (level === 'easy') {
    num1 = Math.floor(Math.random() * 10) + 1;
    num2 = Math.floor(Math.random() * 10) + 1;
    correctAnswer = (num1 + num2).toString();
    question = `What is ${num1} + ${num2}?`;
  } else if (level === 'medium') {
    num1 = Math.floor(Math.random() * 10) + 1;
    num2 = Math.floor(Math.random() * 10) + 1;
    correctAnswer = (num1 * num2 + num1).toString();
    question = `Solve: ${num1} * ${num2} + ${num1}`;
  } else {
    num1 = Math.floor(Math.random() * 5) + 1;
    correctAnswer = (2 * num1).toString();
    question = `Differentiate: d/dx (x^2) at x=${num1}`;
  }
  
  const answers = [
    correctAnswer,
    (parseInt(correctAnswer) + Math.floor(Math.random() * 3) + 1).toString(),
    (parseInt(correctAnswer) - Math.floor(Math.random() * 3) - 1).toString(),
  ].sort(() => Math.random() - 0.5);
  
  return { question, answers, correctAnswer, explanation: `The correct answer is ${correctAnswer}.` };
};

export default function MathQuizApp() {
  const [username, setUsername] = useState('');
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [level, setLevel] = useState('easy');
  const [currentQuestion, setCurrentQuestion] = useState(generateQuestion(level));
  const [selectedAnswer, setSelectedAnswer] = useState<string | null>(null);
  const [score, setScore] = useState(0);
  const [wrongAnswers, setWrongAnswers] = useState(0);
  const [showFeedback, setShowFeedback] = useState(false);

  const handleLogin = () => {
    if (username.trim()) {
      setIsLoggedIn(true);
    }
  };

  const handleAnswerSelection = (answer: string) => {
    setSelectedAnswer(answer);
  };

  const submitAnswer = () => {
    if (selectedAnswer === currentQuestion.correctAnswer) {
      setScore(score + 1);
    } else {
      setWrongAnswers(wrongAnswers + 1);
    }
    setShowFeedback(true);
  };

  const nextQuestion = () => {
    if (score >= 10) {
      alert("Congratulations! Click continue for the next level.");
      setScore(0);
      setLevel(level === 'easy' ? 'medium' : 'hard');
    } else if (wrongAnswers >= 3) {
      alert("Sorry :( You have to restart.");
      setScore(0);
      setWrongAnswers(0);
      setLevel('easy');
    }
    setSelectedAnswer(null);
    setShowFeedback(false);
    setCurrentQuestion(generateQuestion(level));
  };

  if (!isLoggedIn) {
    return (
      <div className="min-h-screen flex flex-col items-center justify-center bg-gradient-to-r from-blue-500 to-indigo-600 p-4">
        <Card className="w-full max-w-sm bg-white shadow-lg rounded-lg p-6">
          <CardHeader>
            <CardTitle className="text-2xl font-bold text-center">Login</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="mb-4 text-center text-sm text-gray-600">You will have to restart if more than 3 are incorrect. All the best!</p>
            <Input
              placeholder="Enter your name"
              value={username}
              onChange={(e) => setUsername(e.target.value)}
              className="w-full mb-4"
            />
            <Button onClick={handleLogin} className="w-full bg-blue-600 hover:bg-blue-700 text-white">
              Start Quiz
            </Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="min-h-screen flex flex-col items-center justify-center bg-gradient-to-r from-purple-500 to-pink-500 p-4">
      <Card className="w-full max-w-md bg-white shadow-lg rounded-lg p-6">
        <CardHeader>
          <CardTitle className="text-2xl font-bold text-center">Math Quiz - {level.charAt(0).toUpperCase() + level.slice(1)} Level</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="mb-4 text-lg font-semibold text-gray-800 text-center">
            {currentQuestion.question}
          </div>
          <div className="space-y-2">
            {currentQuestion.answers.map((answer, index) => (
              <Button
                key={index}
                variant={selectedAnswer === answer ? 'secondary' : 'outline'}
                onClick={() => handleAnswerSelection(answer)}
                className={`w-full ${selectedAnswer === answer ? 'bg-blue-500 text-white' : 'bg-gray-100 hover:bg-gray-200'}`}
                disabled={showFeedback}
              >
                {answer}
              </Button>
            ))}
          </div>
          {selectedAnswer && (
            <Button
              onClick={submitAnswer}
              className="mt-4 w-full bg-green-600 hover:bg-green-700 text-white"
              disabled={showFeedback}
            >
              Submit Answer
            </Button>
          )}
          {showFeedback && (
            <div className="mt-4 text-center">
              {selectedAnswer === currentQuestion.correctAnswer ? (
                <div className="flex items-center justify-center text-green-600">
                  <Check className="mr-2 h-4 w-4" /> Correct!
                </div>
              ) : (
                <div className="flex items-center justify-center text-red-600">
                  <X className="mr-2 h-4 w-4" /> Incorrect!
                </div>
              )}
              <Button onClick={nextQuestion} className="mt-4 w-full bg-purple-600 hover:bg-purple-700 text-white">
                Next
              </Button>
            </div>
          )}
        </CardContent>
        <CardFooter className="text-center text-gray-600">
          <p>Score: {score} | Wrong: {wrongAnswers}</p>
        </CardFooter>
      </Card>
    </div>
  );
}

